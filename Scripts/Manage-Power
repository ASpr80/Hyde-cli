#!/bin/env bash
hyprlandConf="$confDir/hypr/hyprland.conf"
userPrefs="$confDir/hypr/userprefs.conf"
windowRules="$confDir/hypr/windowrules.conf"
animFile="$confDir/hypr/animations.conf"
PowManFile="$cacheDir/power_manager.conf"

powerOpt="$1"
shift

append() {
    if ! grep -q "$1" "$PowManFile"; then
        echo "$1" >>"$PowManFile"
        echo "$2"
    fi
}

remove() {
    if grep -q "$1" "$PowManFile"; then
        sed -i "/$1/d" "$PowManFile"
        echo "$2"
    fi
}

source_files() {
    if [[ ! -f $PowManFile ]]; then
        touch $PowManFile && echo "Added: $hyprlandConf"
    fi
    if ! grep -q "source = $PowManFile" "$hyprlandConf"; then
        echo "source = $PowManFile #! Generated by Hyde-cli power options( To remove: 'Hyde power reset' )" >>"$hyprlandConf"
    elif [ "toggle" == "$powerOpt" ]; then
        sed -i "\#source = $PowManFile#d" "$hyprlandConf"
    fi
}

print_help() {
    echo "Usage: Hyde power $powerOpt [options]"
    echo "Options:"
    sed -n "/^$powerOpt() {/,/^}/p" "$0" |
        sed -n '/case/,/esac/p' | grep ') #?' |
        awk '{gsub(/^[ \t]+/, ""); gsub(/\)/, "]"); gsub(/\|/, "] ["); print}' |
        awk '{print "["$0}' | awk -F '#?' '{sub("\\?", "", $2); printf "%-30s %s\n", $1, $2}'
}

reset() {
    : >"$PowManFile"
    if grep -q "source = $PowManFile" "$hyprlandConf"; then
        sed -i "\#source = $PowManFile#d" "$hyprlandConf"
    fi
    sed -i 's/^\s*#!\(.*windowrule.*opacity\)/\1/' "$windowRules" "$userPrefs"
    sed -i 's/\(animation = borderangle,\) 0,/\1 1,/' "$animFile" "$userPrefs"
    hyprctl reload config-only
}
disable_animations() {
    append 'animations:enabled = 0' "[disable] all window animations"
    append 'layerrule=noanim,waybar' "[disable] waybar animations"
    append 'layerrule=noanim,rofi' "[disable] rofi animations"
    append 'layerrule=noanim,notifications' "[disable] notifications animations"
}
disable_borderangle() {
    append "animation = borderangle, 0" "[disable] Borderangle animation"
}

disable_blur() {
    append "decoration:blur:enabled = 0" "[disable] window blur"
    append 'layerrule=unset,waybar' "[disable] waybar opacity"
    append 'layerrule=unset,rofi' "[disable] rofi opacity"
    append 'layerrule=unset,notifications' "[disable] notifications opacity"
}

disable_opacity() {
    append 'windowrule=opacity 1 override 1 override,title:(.*)' "[disable] window transparency"
    # append 'layerrule=xray[off],waybar'  "[disable] waybar opacity"
    # append 'layerrule=xray[off],rofi' "[disable] rofi opacity"
    # append 'layerrule=xray[off],notifications' "[disable] notifications opacity"
    #! DEPRECATED if grep -q '^[^#]*windowrule.*opacity' "$windowRules" "$userPrefs"; then
    #! DEPRECATED     sed -i '/^[^#]*windowrule.*opacity/s/^/#!/' "$windowRules" "$userPrefs" && echo "DISABLE Transparent opacity"
    #! DEPRECATED fi
}

save() {
    if [[ -z "$@" ]]; then
        print_help
        exit 1
    fi
    source_files
    declare -A processed_flags
    for arg in "$@"; do
        if [ "${processed_flags[$arg]}" != "true" ]; then
            case $arg in
            -a | --animations) #? Disable animations
                disable_animations
                ;;
            -ba | --borderangle) #? Disable border angle animation
                disable_borderangle
                ;;
            -b | --blur) #? Disable blur
                disable_blur
                ;;
            -o | --opacity) #? Disable tranparency
                disable_opacity
                ;;
            on | --all | true | 1) #? Disable all fancy things to save more power
                disable_opacity
                disable_blur
                disable_borderangle
                disable_animations
                ;;
            off | false | 0) #? Disables the power saving mode
                enable_opacity
                enable_blur
                enable_borderangle
                enable_animations
                ;;

            *)
                echo "Unknown flag: $arg"
                print_help
                exit 1
                ;;
            esac
            processed_flags[$arg]="true"
        fi
    done
}

enable_animations() {
    remove "animations:enabled = 0" "[enable] Animations"
    remove 'layerrule=noanim,waybar' "[enable] waybar animations"
    remove 'layerrule=noanim,rofi' "[enable] rofi animations"
    remove 'layerrule=noanim,notifications' "[enable] notifications animations"
}
enable_borderangle() {
    remove "animation = borderangle, 0" "[enable] Border angle animation"
    sed -i 's/\(animation = borderangle,\) 0,/\1 1,/' "$animFile" "$userPrefs"
}

enable_blur() {
    remove "decoration:blur:enabled = 0" "[enable] Blur"
    remove 'layerrule=unset,waybar' "[enable] waybar rules"
    remove 'layerrule=unset,rofi' "[enable] rofi rules"
    remove 'layerrule=unset,notifications' "[enable] notifications rules"
}
enable_opacity() {
    remove "windowrule=opacity 1 override 1 override,title:(.*)" "[enable] Tranparency"
    #! DEPRECATED sed -i 's/^\s*#!\(.*windowrule.*opacity\)/\1/' "$windowRules" "$userPrefs"
}
unset() {
    if [[ -z "$@" ]]; then
        print_help
        exit 1
    fi
    source_files
    declare -A processed_flags
    for arg in "$@"; do
        if [ "${processed_flags[$arg]}" != "true" ]; then
            case $arg in
            -a | --animations) #? Set animations
                enable_animations
                ;;
            -ba | --borderangle) #? Set border angle animation
                enable_borderangle
                ;;
            -b | --blur) #? Set blur
                enable_blur
                ;;
            -o | --opacity) #? Set tranparency
                enable_opacity
                ;;
            --all) #? Remove power saving mode
                enable_opacity
                enable_blur
                enable_borderangle
                enable_animations
                ;;
            *)
                echo "Unknown flag: $arg"
                print_help
                exit 1
                ;;
            esac
            processed_flags[$arg]="true"
        fi
    done
    hyprctl reload config-only
}

toggle() {
    source_files
}
game() {
    "${scrDir}/gamemode.sh"
}

max() { #? Power saving options
    for arg in "$@"; do
        case $arg in
        -a | --animation) #? Animation options
            echo "Animation flag set"
            ;;
        -b | --blur) #? Disable blur
            echo "Blur flag set"
            ;;
        -o | --opacity) #? Solid opacity
            echo "Opacity flag set"
            ;;
        *)
            echo "Unknown flag: $arg"
            print_help
            exit 1
            ;;
        esac
    done
}

$powerOpt "$@"
