#!/bin/env bash

#TODO revise this to not use grimblast 

source_user
screencap_annotate="${annotation_tool:-swappy}"

enable_package grimblast $screencap_annotate
echo $screencap_annotate

if [ -z "${XDG_PICTURES_DIR}" ]; then
    XDG_PICTURES_DIR="${HOME}/Pictures"
fi

if [ -z "${XDG_VIDEOS_DIR}" ]; then
    XDG_VIDEOS_DIR="${HOME}/Videos"
fi

STOP() {
    pkill -SIGINT "${screen_recorder}"
    pkill slurp
    pkill hyprpicker
    rm -fr "${HYDE_RUNTIME_DIR}/*screenshot.png"
}

#variables
OPTION="${1}"
PASS="${*:2}"
logFile="${HYDE_RUNTIME_DIR}/screencap.log"
cacheFile="${cacheDir}/screecap.meta"
vid_dir="${XDG_VIDEOS_DIR}/Recordings"
vid_file=$(date +'%y%m%d_%Hh%Mm%Ss_screenrecord.mp4')
annotate_dir="${XDG_CONFIG_HOME:-$HOME/.config}/$screencap_annotate"
img_dir="${XDG_PICTURES_DIR}/Screenshots"
img_file=$(date +'%y%m%d_%Hh%Mm%Ss_screenshot.png')
temp_screenshot="${HYDE_RUNTIME_DIR}/${img_file}"

mkdir -p "${img_dir}"
mkdir -p "${vid_dir}"
mkdir -p "${annotate_dir}"

case "${screencap_annotate}" in
    swappy)
    screencap_annotate="swappy --output-file ${img_dir}/${img_file}"
    ;;
    satty)
    screencap_annotate="satty  --output-filename ${img_dir}/${img_file}"
    ;;
esac

focus_monitor=$(hyprctl activeworkspace -j | jq -r '.monitor')
#! This is a workaround for now. Will revise this whole script because hyprland and wlscreenrec works better now!
if [[ "${PASS}" = *"--cursor"* ]]; then
PASS="${PASS//--cursor/}"
curStat=$(hyprctl getoption cursor:no_hardware_cursors -j | jq  .int)    
hyprctl keyword cursor:no_hardware_cursors 1
trap 'hyprctl keyword cursor:no_hardware_cursors "${curStat}"' EXIT
fi

first_setup() {
    if [ ! -f "${cacheFile}" ]; then
        enable_package wl-screenrec
        if lspci -nn | grep -Ei "VGA|3D" | grep -q "8086"; then enable_package libva-intel-driver intel-media-driver; fi
        if lspci -nn | grep -Ei "VGA|3D" | grep -q "1002"; then enable_package libva-mesa-driver; fi

        notify-send -a "ScreenCap Initializing" "Testing on monitor: ${focus_monitor}. Please Wait..." -t 10000 -r 56789
        touch "${cacheFile}"
        video_driver_files=$(find /usr/lib/dri -type f -name "*_drv_video.so" -printf '%P\n' | sed 's/_drv_video.so$//')
        for libva_Driver in $video_driver_files; do
            vaMsg="export LIBVA_DRIVER_NAME=\"$libva_Driver\" # This is the driver to be used by wl-screenrec"
            export LIBVA_DRIVER_NAME=${libva_Driver}
            if
                wl-screenrec -f "${HYDE_RUNTIME_DIR}/test.mp4" -o "${focus_monitor}" >"${logFile}" 2>&1 &
                sleep 3 && pkill --signal=SIGINT wl-screenrec
            then
                if grep -q "Failed to initialise VAAPI connection" "${logFile}"; then
                    echo "${libva_Driver} : Not Supported"
                else
                    {
                        echo -e "${vaMsg}"
                        echo "export screen_recorder=\"wl-screenrec\""
                    } >>"${cacheFile}"
                    notify-send -a "ScreenCap" "wl-screenrec will use \"${libva_Driver}\" for screen recording." -t 5000 -r 56789
                    killall wl-screenrec
                    break
                fi
            else
                notify-send -a "ScreenCap: Segfault" "We can't use ${libva_Driver}. Continuing " -e -r 56789
            fi
        done

        if ! grep -q "${vaMsg}" "${cacheFile}"; then
            notify-send -a "ScreenCap" "Oh no! wl-screenrec might not work on your system. Will use 'wf-recorder' for now." -t 3000 -r 56789
            vaMsg="#! Oh no! wl-screenrec is not working for you. Do not worry we will use wf-recorder instead. Try to run 'wl-screenrec' in terminal."
            {
                echo "${vaMsg}"
                echo "export screen_recorder=\"wf-recorder\""
            } >>"${cacheFile}"
            enable_package wf-recorder
        fi
        sleep 3
        # Restart the script
        # exec "${0}" "${*}"
        exit
    else
        . "${cacheFile}"
    fi
}

warn_dup() {
    first_setup
    instance=$(pgrep "${screen_recorder}" | wc -l)
    if [ "${instance}" -ne 0 ]; then
        notify-send -a "Screencap Warning! ${instance} instances running!" " ${screen_recorder} recording at ${focus_monitor}" -i "${temp_screenshot}" -t 900
    else
        notify-send -a "Screencap:" ${screen_recorder}"  recording at ${focus_monitor} " -i "${temp_screenshot}" -t 900
    fi
    sleep 1
}

print_error() {
    usage="$(case_help OPTION)"

    cat <<HELP
Screenrecord: '${screen_recorder}'
Screenshot: 'grimblast'

[Usage] Hyde run screencap [option]

${usage}

For Screen Recording you can pass an argument --help for '${screen_recorder}' options
Example you can append [--audio] to capture audio.

HELP
}

clearNotify() {
    if [ -f "${img_dir}/${img_file}" ]; then
        notify-send -a "Screencap" "Saved in ${img_dir}" -i "${img_dir}/${img_file}" -e
        rm -f "${temp_screenshot}"
    elif [ -f "${vid_dir}/${vid_file}" ]; then
        notify-send -a "Screencap" "Saved in ${vid_dir}" -i "${temp_screenshot}" -e
        rm -f "${temp_screenshot}"
    fi
}

# first_setup "${*}"

if [ "${OPTION}" = "--stop" ]; then
    STOP
fi

case ${OPTION} in
-pa | --print-all) #? 󰄀 Print all screen
    grimblast copysave screen "${temp_screenshot}" && $screencap_annotate -f "${temp_screenshot}"
    clearNotify
    ;;
-f | --freeze) #? 󰄀 Frozen screen, drag to manually snip an area
    grimblast --freeze copysave area "${temp_screenshot}" && $screencap_annotate -f "${temp_screenshot}" ;;
-pm | --print-monitor) #? 󰄀 Print focused monitor
    grimblast copysave output "${temp_screenshot}" && $screencap_annotate -f "${temp_screenshot}"
    clearNotify
    ;;
-ps | --print-snip) #? 󰄀 Drag to manually snip an area
    grimblast copysave area "${temp_screenshot}" && $screencap_annotate -f "${temp_screenshot}"
    clearNotify
    ;;
-sc | --scan) #? 󱉶 Use 'tesseract' to scan image then add to clipboard
    enable_package tesseract-data-eng tesseract
    GEOM=$(slurp)
    grim -g "${GEOM}" "${temp_screenshot}"
    pkg_installed imagemagick && convert "${temp_screenshot}" -sigmoidal-contrast 10,50% "${temp_screenshot}"
    tesseract "${temp_screenshot}" - | wl-copy
    notify-send -a "Screencap" "OCR preview" -i "${temp_screenshot}" -e
    rm -f "${temp_screenshot}"
    ;;
-ra | --record-all) notify-send -a "ScreenCap" "'--record-all' is deprecated please use --record-focus instead" ;;
-rf | --record-focus) #? 󰃽 Record focused monitor
    grim -o "${focus_monitor}" "${temp_screenshot}"
    warn_dup
    if [ -z "${screen_recorder}" ]; then
        $0 --reset
        notify-send "No Screenrecorder Detected"
        first_setup "${*}"
        exit
    fi
    "${screen_recorder}" -f "${vid_dir}/${vid_file}" -o "${focus_monitor}" ${PASS}
    clearNotify
    ;;
-rs | --record-snip) #? 󰃽 Drag to manually snip an area to screen record it
    GEOM=$(slurp)
    grim -g "${GEOM}" "${temp_screenshot}"
    warn_dup
    if [ -z "$screen_recorder" ]; then
        $0 --reset
        notify-send "No Screenrecorder Detected"
        first_setup "${*}"
        exit
    fi
    "${screen_recorder}" -f "${vid_dir}/${vid_file}" -g "${GEOM}" ${PASS}
    clearNotify
    ;;
--stop) #?  Stop every instance of Screencap
    :
    ;;
--reset) #?  Reinitialize screencap
    rm -f "${cacheFile}"
    first_setup "${*}"
    ;;
GUI) : ;;
*) # invalid option
    . "${cacheFile}"
    print_error
    ;;
esac
