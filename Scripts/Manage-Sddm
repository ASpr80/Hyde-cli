#!/bin/env bash

if ! pkg_installed sddm; then exit 0; fi

sddm_bak=/etc/sddm.conf.d/kde_settings.hyde.bak
export sddm_conf_dir=/etc/sddm.conf.d
#! export sddm_conf="${sddm_conf_dir}/kde_settings.conf"
sddm_theme_dir="/usr/share/sddm/themes"

sddm_set() {
    [ -z "${sddm_theme}" ] && print_prompt -r "Operation Cancelled" && return 1
    print_prompt -y "Setting into '${sddm_theme} theme'..."
    ask_confirm "${USER}"
    [ -f "${sddm_bak}" ] && SUPER rm "${sddm_bak}"
    [[ -d "${sddm_conf_dir}" ]] || SUPER mkdir -p "${sddm_conf_dir}"
    SUPER tar -xzf ${CloneDir}/Source/arcs/Sddm_${sddm_theme}.tar.gz -C "${sddm_theme_dir}/${theme}"
    SUPER touch "${sddm_conf_dir}/kde_settings.conf"
    SUPER cp "${sddm_conf_dir}/kde_settings.conf" "${sddm_bak}"
    SUPER cp ${sddm_theme_dir}/${sddm_theme}/kde_settings.conf "${sddm_conf_dir}"
    enable_service sddm
    print_prompt -y "Re-login to apply changes?"
    ask_confirm && systemctl restart --now display-manager

}

sddm_list_arcs() {
    export sddm_theme=$(
        find "${CloneDir}/Source/arcs" -type f -name "*Sddm_*" -printf "%f\n" |
            awk -F 'Sddm_' '{print $2}' |
            awk -F '.tar' '{print $1}' | Fzf-Menu "${FUNCNAME[0]}"
    )
}

sddm_exec_seleted() {
    sddm_theme_conf=$1
    [[ -d "${sddm_conf_dir}" ]] || SUPER mkdir -p "${sddm_conf_dir}"
    [[ -f "${sddm_conf_dir}/kde_settings.conf" ]] && cp -fr "${sddm_conf_dir}/kde_settings.conf" "${sddm_conf_dir}/kde_settings.hyde.bkp"
    # cp "${sddm_theme_conf}" "$(dirname "${sddm_conf_dir}")"
    cp -fr "${sddm_theme_conf}" "${sddm_conf_dir}/kde_settings.conf" && echo "[ok] Sddm theme set"
}

sddm_set_selected() {

    set_theme="${1}"
    cat <<THEME >"${sddm_conf_dir}/user-hyde-theme.conf" && print_prompt -g "[ok] " "$set_theme" || { print_prompt -crit "[err]" "Can't set the theme" && exit 1; }
# This setting is autogenerated by Hyde-cli 
# to unset this theme run ' ${CLI_PATH}/Hyde sddm unset '
# This is positioned almost at the bottom of the sddm.conf.d so this should be executed last

[Theme]
Current=${set_theme}
THEME

    bottom_conf=$(find /etc/sddm.conf.d/ -maxdepth 1 | tail -n 1)
    [ "${bottom_conf}" != "${sddm_conf_dir}/user-hyde-theme.conf" ] && print_prompt -y "[warning] " "${bottom_conf} is overriding the config\nSddm theme might not be setted"

}

sddm_list_theme() {
    find "${sddm_theme_dir}" -maxdepth 2 -name "theme.conf" -exec dirname {} \; | awk -F "${sddm_theme_dir}/" '{print $2}'
}

sddm_set_theme() {

    declare -A sddm_themes
    mapfile -t themes < <(find "${sddm_theme_dir}" -maxdepth 2 -name "theme.conf" -exec dirname {} \; | awk -F "${sddm_theme_dir}/" '{print $2}')

    for theme in "${themes[@]}"; do
        sddm_themes["$theme"]="$theme"
    done

    if [[ -z "${1}" ]]; then
        selected_theme=$(
            # Print the associative array to verify
            for theme_name in "${!sddm_themes[@]}"; do
                # echo "Theme Name: $theme_name, Path: ${sddm_themes[$theme_name]}"
                echo "${theme_name}"
            done | fzf
        )
    else
        if [[ -v sddm_themes["${1}"] ]]; then
            # Proceed with the theme if it exists in the array
            print_prompt -y "[sddm] " "Setting '${1}' theme"
            # Perform actions with the selected theme
            selected_theme=${1}
        else
            print_prompt -r "[error] " "sddm '${1}' theme not found."
            # Handle the case where the theme does not exist
            exit 1
        fi
    fi

    [ -z "${selected_theme}" ] && print_prompt -r "Operation Cancelled" && return 1
    print_prompt -y "[sddm] " "Setting '${selected_theme}' theme "

    if [ ! -w "${sddm_conf_dir}" ]; then
        NOTIFY -a " HyDE-cli " "Run 'sudo chmod -R a+wr ${sddm_conf_dir}' to set the permissions one time" -t 10000
        print_prompt -c "[note] " "Run 'sudo chmod -R a+wr ${sddm_conf_dir}'  to set the permissions one time"
        pkexec bash -c ". ${CLI_PATH}/lib/hyde-cli/Package-Manager ;. ${CLI_PATH}/lib/hyde-cli/Manage-Sddm;sddm_set_selected ${selected_theme}" || exit 1
    else
        :
        sddm_set_selected "${selected_theme}"
    fi
    enable_service sddm
    print_prompt -y "Re-login to apply changes?"
    ask_confirm && systemctl restart --now display-manager
}

sddm_install() {
    sddm_list_arcs
    sddm_set
}

sddm_test() {

    if [[ -z "${1}" ]]; then
        test_theme="$(find "${sddm_theme_dir}" -maxdepth 2 -name "theme.conf" -exec dirname {} \; | awk -F "${sddm_theme_dir}/" '{print $2}' | fzf)"
    else
        test_theme=${1}
    fi
    print_prompt -g "[try] " "${test_theme} theme"

    [ -z "${test_theme}" ] && print_prompt -r "Operation Cancelled" && return 1
    sddm-greeter --test-mode --theme "${sddm_theme_dir}/${test_theme}"
}
sddm_unset() {

    if [ -f "${sddm_conf_dir}/user-hyde-theme.conf" ]; then
        rm "${sddm_conf_dir}/user-hyde-theme.conf"
    else
        print_prompt -y "[warn] " "hyde sddm theme not set"
    fi

}

sddm_info() {
    output=$(find /etc/sddm.conf.d/ -type f -name "*.conf" -exec grep -H "Current" {} \; | tail -n 1)
    cat <<STAT
Current theme: $(awk -F ':Current=' '{print $2}' <<<${output})  
theme directory: $(awk -F ':Current=' '{print $1}' <<<${output})  
STAT
}
