#! /bin/env bash

if [ "${fresh}" = true ]; then

    clear
    cat <<GREET
WOW an Arch BTW User!
${barLine}

$(tput setaf 2)Hello ${USER}! This is an Interactive installation for Hyde.$(tput sgr0)

Hyde-cli is an active helper for Hyde. During this installation, the script will:
1. Check if Hyde is already installed.
2. If not, it will clone the Hyde repository from GitHub. https://github.com/prasanthrangan/hyde
3. Optionally, you can add Chaotic AUR to your mirror list for faster package installation.
4. Finally, it will clone the Hyde repository and run the installation script.

From here on 'Dots' 'Dot Files' means Configurations.

$(tput setaf 3)Hyde-cli is a CLI for Hyde.This aims to add patches
for Hyde and address common Dots issues.
Also this is a USER specific helper, includes a control file for a user to preserve the USER preferences.
Please note that using these scripts may alter your Dot files.$(tput sgr0)

$(tput setaf 6)And wait, there's more!!! Checkout 'Hyde man' to see how you can manage your Hyde setup.$(tput sgr0)

HAVE A GOOD DAY!

Visit: https://github.com/kRHYME7/Hyde-cli for more information.
${barLine}

Clone Directory: ${newCloneDir}
Git Repository: ${GIT}

GREET
    ask_confirm
    git clone --depth 1 "${GIT}" "${newCloneDir}"
fi

if ! grep -q "chaotic-mirrorlist" /etc/pacman.conf; then
    SUPER ${libDir}/Install-chaotic-aur --install fresh
fi

{ [ -d "${newCloneDir}/Scripts" ] && cd "${newCloneDir}/Scripts"; } || exit 1
print_prompt -y "Pulling Hyde repo..."
git stash >/dev/null
git pull
git stash pop 2>/dev/null

if [[ ${branch_opt} == "true" ]]; then  
set_branch
else
current_branch=main
fi
check_integrity "${newCloneDir}"

# export ctlFile="${cacheDir}/manage_cfg.lst"

echo "Clone Directory: ${newCloneDir}"
echo "Git URL: $(git remote get-url origin)"
echo "Git Branch: '${current_branch}'"

#? Source Fn
scriptDir="${newCloneDir}/Scripts"
source "${scriptDir}/global_fn.sh"
if [ $? -ne 0 ]; then
    echo "Error: unable to source global_fn.sh..."
    exit 1
fi
export CloneDir=${newCloneDir}

#? Nvidia
fix_nvidia=false
print_prompt -y "Would you like Hyde to pre-configure your nvidia drivers?"
if nvidia_detect && ask_confirm "Yy"; then export fix_nvidia=true; fi

#? Add Custom Apps
custom_apps="${scriptDir}/custom_apps.lst"
cust_pkg="${HYDE_RUNTIME_DIR}/custom-app-list"
if [[ -e ${custom_apps} ]] && [[ "${no_package}" != true ]] ; then
    # sed 's/^#//' "${custom_apps}" | fzf --multi --prompt='Optional packages: press [ TAB ] to select. [ ESC ] exit. [ RETURN ] confirm' >"${cust_pkg}"
     { echo [Confirm] ; sed -e 's/^#//' -e 's/^[[:space:]]*//' ${custom_apps} | grep "#"  ;} \
    | fzf --multi --prompt='Optional packages: press [ TAB ] to select. [ ESC ] exit. [ RETURN ] confirm' >"${cust_pkg}"
    echo -e "Optional packages loaded:"
    sed -i '/\[Confirm\]/d' "${cust_pkg}"
    cat "${cust_pkg}"
fi

#? Manage Configs
#! [ -e $ctlFile ] && rm $ctlFile $ctl_override
#!  [ ! -e $ctlFile ] && 
#? Better to do a fresh restore on every Hyde-install
Manage-Config generate_config_list
Manage-Config make_List "" --reuse
ask_confirm "Yy" || exit 1

"${scriptDir}/install_pre.sh"

#? Prepare package list
[[ "${no_package}" == true ]] || cp "${scriptDir}/custom_hypr.lst" "${install_packages_list}"

if [ -f "${cust_pkg}" ] && [ ! -z "${cust_pkg}" ]; then
    cat "${cust_pkg}" >>"${install_packages_list}"
fi

#? add nvidia drivers to the list
print_prompt -g "[detect gpu] " "${dGPU}" 

if [ ${fix_nvidia} = true ]; then
    print_prompt -g "[nvidia]" "Configuring nvidia drivers"
    cat /usr/lib/modules/*/pkgbase | while read krnl; do
        echo "${krnl}-headers" >>"${install_packages_list}"
    done
    IFS=$' ' read -r -d '' -a nvga < <(lspci -k | grep -E "(VGA|3D)" | grep -i nvidia | awk -F ':' '{print $NF}' | tr -d '[]()' && printf '\0')
    for nvcode in "${nvga[@]}"; do
        awk -F '|' -v nvc="${nvcode}" '{if ($3 == nvc) {split(FILENAME,driver,"/"); print driver[length(driver)],"\nnvidia-utils"}}' "${scriptDir}"/.nvidia/nvidia*dkms >>"${install_packages_list}"
    done
fi


#----------------#
# get user prefs #
#----------------#

if ! chk_list "aurhlpr" "${aurList[@]}"; then
    echo -e "Available aur helpers:\n[1] yay\n[2] yay (bin)\n[3] paru\n[4] paru (bin)"
    prompt_timer 120 "Enter option number [default: yay]"

    case "${promptIn}" in
    1) export getAur="yay" ;;
    2) export getAur="yay-bin" ;;
    3) export getAur="paru" ;;
    4) export getAur="paru-bin" ;;
    *)
        echo -e "...Invalid option selected..."
        exit 1
        ;;
    esac
fi



#? install packages from the list

# cat  "${install_packages_list}"
[[ "${no_package}" == true ]] || "${scriptDir}/install_pkg.sh" "${install_packages_list}" && rm -fr "${install_packages_list}"

#? restore custom configs

./restore_fnt.sh || true
Restore-Config --only "${HYDE_RUNTIME_DIR}/" ${CloneDir}/Configs

[ $(ls ${hydeConfDir}/themes | wc -l) -eq 0  ] && export defaultTheme="Catppuccin Mocha"
Manage-Themes theme_patcher || true

shell_select || true

	. Manage-Sddm
sddm_install || true
# TODO Flatpak installation 

#------------------------#
# enable system services #
#------------------------#

# set_metadata "${CloneDir}"

while read servChk; do

    if [[ $(systemctl list-units --all -t service --full --no-legend "${servChk}.service" | sed 's/^\s*//g' | cut -f1 -d' ') == "${servChk}.service" ]]; then
        echo -e "\033[0;33m[SKIP]\033[0m ${servChk} service is active..."
    else
        echo -e "\033[0;32m[systemctl]\033[0m starting ${servChk} system service..."
        SUPER systemctl enable "${servChk}.service"
        SUPER systemctl start "${servChk}.service"
    fi

done <"${scriptDir}/system_ctl.lst"
