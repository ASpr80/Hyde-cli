#!/bin/env bash

show_restore_list() {
  cat <<REVIEW
"Please review the list..."
$(barLine)
O   Overwrite     ﬌ Move dots to Backup then populate dots from source directory (${CloneDir})
                       Move means mving the whole directory including all files inside.
S   Sync          ﬌ Copy dots to Backup > Copy to overwrite dots from source directory (${CloneDir})  
                      ﯧ Recommended to use.It will only overrwrite the CONFLICTING files if both files exist.
P   Preserve      ﬌ Populates dots but preserves existing user sots
                      ﯧ Will skip the files/dirs if it already exists
B   Backup        ﬌ Only backup the selected dots (Default)
                      ﯧ 'Hyde backup clean' to do some cleanup
$(barLine)
$(GROUP "${1}")
$(barLine)
REVIEW
}

GROUP() {
  awk -F '|' '{
    # Map the prefix letters to category names
    if ($1 == "P") category = "\\\\ [Preserve/Populate] \\\\";
    else if ($1 == "S") category = "\\\\ [Sync] \\\\";
    else if ($1 == "O") category = "\\\\ [Overwrite] \\\\";
    else if ($1 == "R") category = "\\\\ [Rsync] \\\\";
    else if ($1 == "B") category = "\\\\ [Backup] \\\\";
    else category = "\\\\ [Unknown] \\\\";

    # Skip the first field and print the rest of the line
    files[category] = files[category] ? files[category] "\n" substr($0, index($0, $2)) : substr($0, index($0, $2))
 }

 END {
    n = asorti(files, categories)
    for (i = 1; i <= n; i++) {
      print categories[i] # Print the category name
      split(files[categories[i]], lines, "\n")
      for (j in lines) {
        print lines[j]
      }
      for (j = 1; j <= 68; j++) printf "━"
      printf "\n"
    }
 }' ${1}
}

menu_manage_config() {
  while true; do
    options=(
      "[Confirm]"
      "[Back Up]"
      "[Preserve/Populate]"
      "[Sync]"
      "[Overwrite]"
    )

    # Use fzf to select an option
    selected_option=$(printf '%s\n' "${options[@]}" | Fzf-Menu "${FUNCNAME[0]}")

    # Call the selected function or return to the main menu
    case $selected_option in
    "[Overwrite]")
      make_List_OVERWRITE
      ;;
    "[Sync]")
      make_List_SYNC
      ;;
    "[Preserve/Populate]")
      make_List_PRESERVE
      ;;
    "[Back Up]")
      make_List_BACKUP
      ;;
    "[Confirm]")
      # Add your logic here for confirmation
      break # Exit the loop after confirmation
      ;;
    *)
      # echo "Unknown option selected"
      :
      ;;
    esac
  done
}

list_Backup() {
  if [ -d "$BkpDir" ] && [ "$(ls -A "$BkpDir")" ]; then
    print_prompt -m "List of backups:"
    bak_list=$(ls -l -r $BkpDir | tac | awk '{for(i=6; i<=NF; ++i) printf $i (i==NF ? "\n" : OFS)}')
    print_prompt -b "$bak_list"
  else
    print_prompt -m "Backup: empty"
    return 1
  fi
}

generate_config_list() { #* Check the content of a Directory and make a restore list
  # restore_directory is the  Source directory for Configs
  restore_directory="${1:-${CloneDir}/Configs}"
  # echo "$restore_directory"
  # shellcheck disable=SC2154
  : >"${ctl_override}"
  # Read the file line by line
  while IFS= read -r line; do
    IFS='|' read -r -a array <<<"$line"

    # Get the directory and file/directory name from the 3rd and 4th columns
    flg="${array[0]}${array[1]}" #? This part are the flags so I can follow the defaults
    dir="${array[2]}"
    files="${array[3]}"
    pkg="${array[4]}"
    curr="${dir/\$\{HOME\}/}"

    # Split the files into an array
    IFS=' ' read -r -a files_array <<<"$files"
    # Iterate over each file or directory in the 4th column
    for file in "${files_array[@]}"; do
      case "$restore_directory" in
      "BACKUP")
        echo "B|$dir|$file|$pkg" >>"${ctl_override}"
        ;;
      "OVERWRITE")
        echo "O|$dir|$file|$pkg" >>"${ctl_override}"
        ;;
      *)
        if [ -e "$restore_directory$curr/$file" ]; then
          if [ "${flg}" == "NY" ]; then
            echo "P|$dir|$file|$pkg" >>"${ctl_override}"
          else
            echo "S|$dir|$file|$pkg" >>"${ctl_override}"
          fi
        fi
        ;;
      esac
    done
  done <"$(dirname "${restore_directory}")/Scripts/restore_cfg.lst"
}

# shellcheck disable=SC2120
#* assumes the 1st param is directory
#* The rest are decisional flags
#* --reuse  ? assume that ctl_override is already present
#* --edit ?  Modifies the control file then exit
make_List() {
  # enable_package md5sum
  CloneDir=${1:-"${CloneDir}"}
  [ ! -d "${CloneDir}"  ] && exit 0

  #? If the ctlFile is present and no reuse flag do this
  if [ -e "${ctlFile}" ] && [[ $* != *"--reuse"* ]]; then
      show_restore_list "${ctlFile}"
    now_restore_cfg_hash="$(md5sum "${CloneDir}/Scripts/restore_cfg.lst" | cut -d' ' -f1)"

      if [ "$now_restore_cfg_hash" != "${restore_cfg_hash}" ]; then
        generate_config_list "${CloneDir}/Configs"
        print_prompt -g "\n\n\nNew Files has been added/removed!" "\nCreate a new control file to avoid conflicts!\n"
      else
        print_prompt -g "Found existing: '${ctlFile}'" "\nWould you like to use your last preferred selection?"
        ask_confirm "Yy"
          if [ $? -eq 1 ]; then
            generate_config_list "${CloneDir}/Configs"
          else
            cp "${ctlFile}" "${ctl_override}"
          fi
      fi
      read
  elif [[ $* == *"--reuse"* ]] && [ -e "${ctl_override}" ]; then
    #? --reuse will always assume that ctl_override is already present
    show_restore_list "${ctl_override}"
  else
  cat <<MISSING
  Missing?
  "${ctlFile}" 
  "${ctl_override}"
MISSING
  exit 0
  fi

  menu_manage_config
  show_restore_list "${ctl_override}"
  if [[ $* != *"--reuse"* ]]; then
    print_prompt -y "Save this as your new control file?" && ask_confirm "Yy" &&
      [ $? -ne 1 ] &&
      cp "${ctl_override}" "${ctlFile}"
    [[ $* = *"--edit"* ]] && exit 0
  fi
  print_prompt -wt '[ctrl + c]' -r ' Cancel'
  print_prompt "Continue?"

}

#! Deprecated
#* assumes the 1st param is directory
#* The rest are decisional flags
#* --reuses  ? assume that ctl_override is already present
#* --edit ?  Modifies the control file then exit
list_Marker() {
  CloneDir=${1:-${CloneDir}}
  if [ -e "${ctlFile}" ] && [[ $* != *"--reuse"* ]]; then
    show_restore_list "${ctlFile}"

    now_restore_cfg_hash="$(md5sum "${CloneDir}/Scripts/restore_cfg.lst" | cut -d' ' -f1)"

    if [ "$now_restore_cfg_hash" != "$restore_cfg_hash" ]; then
      print_prompt -y "New/Changed: '${CloneDir}/Scripts/restore_cfg.lst' !" "\nCreate a new control file to avoid conflicts"
      generate_config_list "${CloneDir}/Configs"
    else
      print_prompt -y "Existing Control file: '${ctlFile}'" "\nWould you like to use your last preferred selection?"
      ask_confirm "Yy"
      if [ $? -eq 1 ]; then
        generate_config_list "${CloneDir}/Configs"
      else
        cp "${ctlFile}" "${ctl_override}"
      fi
    fi
    read
  elif [[ $* == *"--reuse"* ]] && [ -e "${ctl_override}" ]; then
    #? --reuse will always assume that ctl_override is already present
    show_restore_list "${ctl_override}"
  fi
  menu_manage_config
  show_restore_list "${ctl_override}"
  if [[ $* != *"--reuse"* ]]; then
    print_prompt -y "Save this as your new control file?" && ask_confirm "Yy" &&
      [ $? -ne 1 ] &&
      cp "${ctl_override}" "${ctlFile}"
    [[ $* = *"--edit"* ]] && exit 0
  fi
  print_prompt -wt '[ctrl + c]' -r ' Cancel'
  print_prompt "Continue?"
}

make_List_OVERWRITE() {
  OVERWRITE="$(
    echo -e "[CONFIRM]\n$(awk -F'|' '!/^O/ {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' "${ctl_override}")" |
      Fzf-Menu "${FUNCNAME[0]}"
  )"

  awk -v ignore="$(echo "$OVERWRITE" | sed '/^[[:space:]]*$/d')" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "O"; print; next} {print}}' "${ctl_override}" >./temp.lst && mv ./temp.lst "${ctl_override}"
}

make_List_SYNC() {
  SYNC="$(
    echo -e "[CONFIRM]\n$(awk -F'|' '!/^S/ {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' "${ctl_override}")" |
      Fzf-Menu "${FUNCNAME[0]}"
  )"

  awk -v ignore="$(echo "$SYNC" | sed '/^[[:space:]]*$/d')" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "S"; print; next} {print}}' "${ctl_override}" >./temp.lst && mv ./temp.lst "${ctl_override}"
}

make_List_PRESERVE() {
  PRESERVE="$(
    echo -e "[CONFIRM]\n$(awk -F'|' '!/^P/ {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' "${ctl_override}")" |
      Fzf-Menu "${FUNCNAME[0]}"
  )"

  awk -v ignore="$(echo "$PRESERVE" | sed '/^[[:space:]]*$/d')" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "P"; print; next} {print}}' "${ctl_override}" >./temp.lst && mv ./temp.lst "${ctl_override}"
}

make_List_BACKUP() {
  BACKUP="$(
    echo -e "[CONFIRM]\n$(awk -F'|' '!/^B/ {for(i=2; i<=NF; i++) printf $i (i==NF ? "\n" : "|")}' "${ctl_override}")" |
      Fzf-Menu "${FUNCNAME[0]}"
  )"

  awk -v ignore="$(echo "$BACKUP" | sed '/^[[:space:]]*$/d')" -F'|' -v OFS='|' 'BEGIN{split(ignore, a, "\n")} {for(i in a) if(index($0, a[i]) != 0) {$1 = "B"; print; next} {print}}' "${ctl_override}" >./temp.lst && mv ./temp.lst "${ctl_override}"
}

all() {
  list_Backup
  echo -e "\e[33mBacking up Dots and wallpapers, May use significant storage. \nRun 'Hyde backup clean' to free up space.\e[0m"
  ask_confirm
  awk -F'|' -v OFS='|' '{ $2="B"; print $2"|"$3"|"$4"|"$5  }' ./restore_cfg.lst >${ctl_override}
  Restore-Config --only "${HYDE_RUNTIME_DIR}/"
  bak=$(ls -td -- $BkpDir/* | head -n 1)
  if [[ "$last_bak" != "$bak" ]]; then
    echo -e "\e[33mProvide a Short Description for the Backup:[All]\e[0m"
    read user_note
    user_note=$(echo "$user_note" | tr ' ' '_')
    note=${user_note:-"All"}
    mv "$bak" "$bak--$note"
  fi
}

revert() {
  clear
  list_Backup || exit 1
  barLine
  print_prompt -y "Restoring a backup will not create a backup of the current dots.\nExecute 'Hyde backup all' to save the current Dots"
  ask_confirm
  awk -F'|' -v OFS='|' '{ $2="O"; print $2"|"$3"|"$4"|"$5  }' ./restore_cfg.lst >${ctl_override}
  selected_backup=$(ls -l -r $BkpDir | grep -- '--' | awk '{print $6,$7,$8,$9}' | Fzf-Menu "${FUNCNAME[0]}" |
    cut -d ' ' -f4) && echo "$selected_backup"
  if [[ -z $selected_backup ]]; then
    echo "Operation Cancelled"
    exit 0
  fi
  ask_confirm "$USER"
  Restore-Config --only "${HYDE_RUNTIME_DIR}/" "$BkpDir/$selected_backup"
  bak=$(ls -td -- $BkpDir/* | head -n 1)
  if [[ "$last_bak" != $bak ]]; then
    rm -fr $bak
    #echo "Removed: $(ls -td -- $BkpDir/* | head -n 1 )"
  fi
  barLine
  Hyde reload
}

BackUp() {
  if [[ -z ${1} ]]; then
    list_Backup
    print_prompt -y "WARNING! " "Not all Dots may have been fully backed up, You might encounter errors!"
    ask_confirm
    selected_backup=$(ls -l -r $BkpDir |
      awk '{print $6,$7,$8,$9}' |
      grep -v '^[[:space:]]*$' |
      Fzf-Menu "${FUNCNAME[0]}" |
      cut -d ' ' -f4)
    config_source="${BkpDir}/${selected_backup}"
  else
    config_source="${1}"
    [[ ! -e ${config_source} ]] && print_prompt -r "Invalid Directory: ${config_source} "
  fi

  if [[ ! -z "$selected_backup" && "$selected_backup" != " " ]] || [[ -e ${config_source} ]]; then
    print_prompt -y "Restoring from:" "${config_source}"
    echo "Please Review files to be re-populated to your Dots"
    if [ -e "${config_source}/$(basename ${ctlFile})" ]; then
      cp -f "${config_source}/$(basename ${ctlFile})" "${ctl_override}"
      print_prompt -y "Using the Backup manifest file"
    else
      echo "Generating list..."
      generate_config_list
    fi
    make_List "${config_source}" --reuse
    ask_confirm "${USER}"
    if [[ -z $selected_backup ]]; then
      echo "Nothing Selected"
      exit 0
    fi
    Restore-Config "${HYDE_RUNTIME_DIR}/" "${config_source}"
    Hyde reload
    bak=$(ls -td -- $BkpDir/* | head -n 1)
    if [[ "${last_bak}" != "${bak}" ]]; then
      mv "$bak" "$bak-_before_Hyde_restore_BackUp"
      print_prompt -y "Bakckup: $bak-_before_Hyde_restore_BackUp"
    fi
  else
    print_prompt -y "Operation cancelled"
    exit 0
  fi
}

clean() {
  list_Backup || exit 1
  selected_backup=$(ls -l -r $BkpDir | awk '{for(i=6; i<=NF; ++i) printf $i (i==NF ? "\n" : OFS)}' | grep -v '^[[:space:]]*$' | Fzf-Menu "${FUNCNAME[0]}")
  if [[ ! -z "$selected_backup" && "$selected_backup" != " " ]]; then
    clear
    print_prompt -r "To Be Removed:" 
    barLine
    print_prompt "$selected_backup"
    barLine
    print_prompt -r "WARNING! " -y "Deleted backups are not recoverable, are you sure?"
    ask_confirm "$USER"
    echo -e "$selected_backup" | awk '{for(i=4; i<=NF; ++i) printf $i (i==NF ? "\n" : OFS)}' | while read -r line; do
      if [ -n "$line" ]; then rm -r "${BkpDir}/${line}"; fi
    done
    loading_spinner $!
  else
    print_prompt -y "Operation cancelled"
    exit 0
  fi

}

Clone() {
  if [ ! -d "$1" ]; then
    echo "Not a directory"
    exit 1
  fi
  custClone="$1"
  check_integrity "${custClone}"
  echo "Generating a Restore List"
  cd $custClone/Scripts || handle_error "Cannot change directory to $custClone/Scripts"
  #! generate_config_list "$custClone/Configs"
  make_List "${custClone}"
  ask_confirm "$USER"
  # ./restore_fnt.sh
  Restore-Config "${HYDE_RUNTIME_DIR}/" "${custClone}/Configs" && set_metadata "${custClone}"
  Hyde reload
}

upgrade() {
  custom_apps="${CloneDir}/Scripts/custom_apps.lst"
  if [[ -e ${custom_apps} ]]; then

    # sed 's/^#//' "${custom_apps}" | fzf --multi --prompt='Optional packages: press [ TAB ] to select. [ ESC ] exit. [ RETURN ] confirm' >"${install_packages_list}"
    # sed 's/^#//' "${custom_apps}" | grep "#"  \
    sed -e 's/^#//' -e 's/^[[:space:]]*//' ${custom_apps} | grep "#" |
      fzf --multi --prompt='Optional packages: press [ TAB ] to select. [ ESC ] exit. [ RETURN ] confirm' >"${install_packages_list}"
    echo -e "Optional packages loaded:"
    cat "${install_packages_list}"
  fi

  make_List
  ./install.sh -i "${install_packages_list}"
  ./restore_fnt.sh

  Restore-Config "${HYDE_RUNTIME_DIR}/" && set_metadata
  ./install_pst.sh
  Hyde reload
}

if [ ! -f "${ctlFile}" ]; then
  print_prompt -r "ERROR : '${ctlFile}' does not exist..." -y "\nFetching from $CloneDir"
  if [ ! -f ${CloneDir}/Scripts/restore_cfg.lst ]; then
    print_prompt -r "[ERROR] ${CloneDir} did not contain any ./restore_cfg.lst File!"
    exit 1
  fi
  awk -F'|' '{print "P|"$(NF-2)"|"$(NF-1)"|"$NF}' ${CloneDir}/Scripts/restore_cfg.lst >${ctlFile}
  generate_config_list "${CloneDir}/Configs"
  cat "${ctlFile}"
fi

"$@"
